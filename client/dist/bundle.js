class e{constructor(){this.isActive=!1,this.ownerId=null,this.grid=null,this.lastProcessedMessage="",this.movementInterval=null,this.followRange=8,this.loseInterestRange=12,this.normalInterval=3e3,this.followingInterval=1,this.maxMoveDistance=3,this.maxFollowDistance=3,this.idealDistance=2,this.moveDelay=170,this.sadEmoji="😢",this.heartEmoji="❤️",this.flowerItemId="flower",this.serverUrl="http://localhost:3000",this.apiRequestQueue=[],this.isProcessingQueue=!1,this.setupEventListeners(),this.emotion={happiness:50,excitement:50,tiredness:50},this.MAX_EMOTION=100,this.MIN_EMOTION=0,this.emotionDecayInterval=setInterval((()=>this.decayEmotions()),6e4),this.emojiQueue=[],this.isShowingEmoji=!1,this.emojiDuration=3e3}async startBehavior(){this.isActive||(this.isActive=!0,this.initializeGrid(),this.startPeriodicCheck(),await this.scheduleNextBehavior(),console.log("Avatar pet behavior started!"))}stopBehavior(){this.isActive&&(this.isActive=!1,clearTimeout(this.movementInterval),this.ownerId=null,console.log("Avatar pet behavior stopped."))}initializeGrid(){const e=game.completeMaps[game.getMyPlayer().map];if(e){this.grid=new Array(60).fill(null).map((()=>new Array(126).fill(1)));for(let t=0;t<60;t++)for(let s=0;s<126;s++)e.collisions[t]&&e.collisions[t][s]&&(this.grid[t][s]=0)}}async scheduleNextBehavior(){const e=this.ownerId?this.followingInterval:this.normalInterval;await new Promise((t=>setTimeout(t,e))),this.isActive&&(await this.behave(),await this.scheduleNextBehavior())}async behave(){if(game.getMyPlayer())if(Math.random()<1e-4&&this.reactToEmotionalState(),this.ownerId)game.players[this.ownerId]?await this.followPlayer():(this.ownerId=null,this.showEmoji(this.sadEmoji));else{const e=this.findNearbyPlayerToFollow();e?(this.setNewOwner(e.id),await this.followPlayer()):await this.moveFreely()}}}const t={addToRequestQueue(e){return new Promise(((t,s)=>{this.apiRequestQueue.push({message:e,resolve:t,reject:s}),this.processQueue()}))},async processQueue(){if(this.isProcessingQueue||0===this.apiRequestQueue.length)return;this.isProcessingQueue=!0;const{message:e,resolve:t,reject:s}=this.apiRequestQueue.shift();try{t(await this.makeApiRequest(e))}catch(e){s(e)}finally{this.isProcessingQueue=!1,this.processQueue()}},async makeApiRequest(e){console.log("API 요청 중...",e);try{const t=await fetch(`${this.serverUrl}/generate-response`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({data:e})});if(console.log("API 응답:",t),!t.ok)throw new Error(`HTTP error! status: ${t.status}`);return(await t.json()).response}catch(e){throw console.error("Error in API request:",e),e}}},s={showEmoji(e){this.queueEmoji(e)},queueEmoji(e){this.emojiQueue.push(e),this.isShowingEmoji||this.showNextEmoji()},showNextEmoji(){if(0===this.emojiQueue.length)return this.isShowingEmoji=!1,void game.setEmote("");this.isShowingEmoji=!0;const e=this.emojiQueue.shift();game.setEmote(e),console.log(`Avatar pet showed ${e} emoji`),setTimeout((()=>{this.showNextEmoji()}),this.emojiDuration)}},i={updateEmotion(e,t){this.emotion[e]=Math.max(this.MIN_EMOTION,Math.min(this.MAX_EMOTION,this.emotion[e]+t))},decayEmotions(){Object.keys(this.emotion).forEach((e=>{this.emotion[e]=Math.max(this.MIN_EMOTION,this.emotion[e]-1)}))},getEmotionalState(){const{happiness:e,excitement:t,tiredness:s}=this.emotion;return e>80?"very happy":e>60?"happy":e<30?"sad":t>80?"very excited":t>60?"excited":t<30?"bored":s>80?"exhausted":s>60?"tired":s<30?"energetic":"neutral"},reactToEmotionalState(){switch(this.getEmotionalState()){case"very happy":this.showEmoji("😄"),this.performTrick();break;case"happy":this.showEmoji("🙂");break;case"sad":this.showEmoji("😢");break;case"very excited":this.showEmoji("🤩"),this.performTrick();break;case"excited":this.showEmoji("😃");break;case"bored":this.showEmoji("😴");break;case"exhausted":this.showEmoji("😫"),this.safeMove(Math.floor(4*Math.random()));break;case"tired":this.showEmoji("😩");break;case"energetic":this.showEmoji("💪"),this.performTrick();break;default:this.showEmoji("😐")}},reactToVoice(){console.log("Avatar pet is reacting to voice...");const e=["👂","🎵","🔊","😃","🗣️"],t=e[Math.floor(Math.random()*e.length)];this.showEmoji(t)}},o={setupEventListeners(){game.subscribeToEvent("playerShootsConfetti",this.onConfettiShot.bind(this)),game.subscribeToEvent("playerActivelySpeaking",this.onPlayerSpeaking.bind(this))},startPeriodicCheck(){console.log("startPeriodicCheck 메소드 시작"),this.lastMessageCount=0,setInterval((()=>{try{const e=document.getElementsByClassName("sendbird-channel-list__body");if(0===e.length)return void console.log("bodyContainers를 찾지 못함");const t=e[e.length-1]?.querySelector(".css-6unyhe > :nth-child(2) > :nth-child(2) > :first-child :first-child");if(t){const e=t.textContent;e!==this.lastProcessedMessage&&(console.log("새 메시지 발견:",e),this.lastProcessedMessage=e,this.onPlayerChat({messageText:e}))}}catch(e){console.error("주기적 체크 중 오류 발생:",e)}}),1e3)},async generateAIResponse(e){try{return await this.addToRequestQueue({message:e,emotion:this.emotion})}catch(e){return console.error("Error generating AI response:",e),"Woof! (AI error)"}},onConfettiShot(e,t){console.log("Confetti shot event received:",t);const s=t.playerId,i=game.players[s],o=game.getMyPlayer();this.isAdjacentAndFacing(i,o)&&this.changeOwner(s)},onPlayerSpeaking(e,t){const s=t.playerId,i=game.players[s],o=game.getMyPlayer();this.isNearby(i,o)&&this.reactToVoice()},async onPlayerChat(e){console.log("onPlayerChat 호출됨, data:",e);const t=e.messageText,s=await this.generateAIResponse(t);this.respondToChat(s)},respondToChat(e){console.log("respondToChat 호출됨, 응답:",e);const t=game.getMyPlayer().name;console.log("현재 이름:",t),game.setName(e),console.log("이름을 응답으로 변경함"),setTimeout((()=>{game.setName(t),console.log("5초 후 원래 이름으로 복구")}),8e3)}},n={async moveAlongPathSmooth(e){for(const t of e){const e=game.getMyPlayer();if(!e)return;const s=t.x-e.x,i=t.y-e.y,o=this.getDirection(s,i);this.safeMove(o),await new Promise((e=>setTimeout(e,this.moveDelay)))}},getDirection:(e,t)=>Math.abs(e)>Math.abs(t)?e>0?1:0:t>0?3:2,safeMove(e){try{game.move(e)}catch(e){console.log("Error in move:",e)}},async moveFreely(){const e=game.getMyPlayer();if(!e)return;const t=e.x+Math.floor(7*Math.random())-3,s=e.y+Math.floor(7*Math.random())-3,i=this.findPath({x:e.x,y:e.y},{x:t,y:s});if(i.length>1){const e=Math.min(i.length-1,3);await this.moveAlongPathSmooth(i.slice(1,e+1))}Math.random()<.02&&this.performTrick(),this.updateEmotion("happiness",-2),this.updateEmotion("excitement",-1),this.updateEmotion("tiredness",1)},async followPlayer(){const e=game.getMyPlayer(),t=game.players[this.ownerId];if(!e||!t)return this.ownerId=null,void this.showEmoji(this.sadEmoji);const s=this.getDistance(e,t);if(s>this.loseInterestRange)return console.log("Target player is too far, losing interest"),this.ownerId=null,void this.showEmoji(this.sadEmoji);if(s>this.idealDistance){const s=this.findPath({x:e.x,y:e.y},{x:t.x,y:t.y});if(s.length>1){const e=Math.min(s.length-1,this.maxMoveDistance);await this.moveAlongPathSmooth(s.slice(1,e+1))}this.updateEmotion("happiness",5),this.updateEmotion("excitement",3),this.updateEmotion("tiredness",2)}else Math.random()<.02&&this.performTrick()}};class a{constructor(){this.elements=[]}enqueue(e,t){this.elements.push({element:e,priority:t}),this.elements.sort(((e,t)=>e.priority-t.priority))}dequeue(){return this.elements.shift().element}isEmpty(){return 0===this.elements.length}includes(e){return this.elements.some((t=>t.element.x===e.x&&t.element.y===e.y))}}const r={findPath(e,t){const s=new a,i=new Set,o=new Map,n=new Map,r=new Map;for(s.enqueue(e,0),n.set(this.pointToString(e),0),r.set(this.pointToString(e),this.heuristic(e,t));!s.isEmpty();){const e=s.dequeue();if(e.x===t.x&&e.y===t.y)return this.reconstructPath(o,e);i.add(this.pointToString(e));for(const a of this.getNeighbors(e)){if(i.has(this.pointToString(a)))continue;const h=n.get(this.pointToString(e))+1;(!s.includes(a)||h<n.get(this.pointToString(a)))&&(o.set(this.pointToString(a),e),n.set(this.pointToString(a),h),r.set(this.pointToString(a),n.get(this.pointToString(a))+this.heuristic(a,t)),s.includes(a)||s.enqueue(a,r.get(this.pointToString(a))))}}return[]},getNeighbors(e){const t=[],s=[{x:0,y:-1},{x:1,y:0},{x:0,y:1},{x:-1,y:0}];for(const i of s){const s=e.x+i.x,o=e.y+i.y;s>=0&&s<126&&o>=0&&o<60&&1===this.grid[o][s]&&t.push({x:s,y:o})}return t},heuristic:(e,t)=>Math.abs(e.x-t.x)+Math.abs(e.y-t.y),reconstructPath(e,t){const s=[t];for(;e.has(this.pointToString(t));)t=e.get(this.pointToString(t)),s.unshift(t);return s}},h={findNearbyPlayerToFollow(){const e=game.getMyPlayer();if(!e)return null;const t=Object.values(game.players).filter((t=>t.id!==e.id&&this.getDistance(e,t)<=this.followRange));return t.length>0?t.reduce(((t,s)=>{const i=this.getDistance(e,s);return i<t.distance?{player:s,distance:i}:t}),{player:null,distance:1/0}).player:null},setNewOwner(e){this.ownerId=e;const t=game.players[e]?.name||"알 수 없음";console.log(`새로운 주인이 생겼습니다! 이름: ${t}, ID: ${e}`),this.updateEmotion("happiness",20),this.updateEmotion("excitement",15),this.updateEmotion("tiredness",-10),this.showEmoji(this.heartEmoji)},changeOwner(e){this.ownerId=e;const t=game.players[e]?.name||"알 수 없음";console.log(`주인이 바뀌었습니다! 새 주인의 이름: ${t}, ID: ${e}`),this.showEmoji(this.heartEmoji)},isAdjacentAndFacing(e,t){console.log("Checking if player is adjacent and facing target..."),console.log("Player:",e.direction);const s=e.x-t.x,i=e.y-t.y,o=Math.abs(s)+Math.abs(i);if(console.log("Distance:",o,s,i),1!==o)return!1;switch(e.direction){case 5:return 1===s&&0===i;case 7:return-1===s&&0===i;case 3:return 0===s&&1===i;case 1:return 0===s&&-1===i;default:return!1}}},l={getDistance:(e,t)=>Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)),pointToString:e=>`${e.x},${e.y}`,isNearby(e,t,s=5){return this.getDistance(e,t)<=s},performTrick(){}};Object.assign(e.prototype,n,r,h,o,i,s,t,l);const c=function(){const t=new e;return t.startBehavior(),console.log("Custom pet is now running!"),t}();window.pet=c;